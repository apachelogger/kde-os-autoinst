env.DIST = 'bionic'
env.PWD_BIND = '/workspace'

if (env.TYPE == null) {
  if (params.TYPE != null) {
    env.TYPE = params.TYPE
  } else {
    type = inferType()
    if (type != null) {
      env.TYPE = type
    }
  }
}

if (env.TYPE == null) {
  error 'TYPE param not set. Cannot run install test without a type.'
}

if (env.TESTS_TO_RUN == null && env.PLASMA_DESKTOP == null && env.OPENQA_SNAP_NAME == null) {
  error 'TESTS_TO_RUN param not set. Cannot run nothing.'
}

fancyNode('openqa') {
  try {
    stage('clone') {
      checkout scm
    }
    stage('rake-test') {
      sh 'rake test'
    }
    stage('test') {
      wrap([$class: 'LiveScreenshotBuildWrapper', fullscreenFilename: 'wok/qemuscreenshot/last.png']) {
        sh 'bin/contain.rb /workspace/bin/bootstrap.rb'
      }
    }
  } finally {
    dir('metadata') { archiveArtifacts '*' }
    dir('wok') { archiveArtifacts allowEmptyArchive: true, artifacts: 'testresults/*, ulogs/*, video.*, vars.json, slide.html' }
    junit 'junit/*'
  }
}

def fancyNode(label = null, body) {
  node(label) {
    wrap([$class: 'AnsiColorBuildWrapper', colorMapName: 'xterm']) {
      wrap([$class: 'TimestamperBuildWrapper']) {
        finally_cleanup { finally_chown { body() } }
      }
    }
  }
}

def finally_chown(body) {
  try {
    body()
  } finally {
    sh 'bin/contain.rb chown -R jenkins .'
  }
}

def finally_cleanup(body) {
  try {
    body()
  } finally {
    if (!env.NO_CLEAN) {
      cleanWs()
    }
  }
}

// When not called from an ISO build we'll want to infer the type from our own name.
def inferType() {
  if (!env.JOB_NAME) {
    return null
  }
  String[] types = ["user", "user_lts", "unstable", "testing"]
  for (type in types) {
    if (env.JOB_NAME.contains(type)) {
      return type
    }
  }
  return null
}
